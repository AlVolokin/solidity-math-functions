pragma solidity  ^0.4.19;

contract ModifiedMathFuncs {
    
    int256 firstNumber = 0;
    
    function getFirstNumber() public view returns(int256) {
        return firstNumber;
    }
    
    function resetFirstNumber() public returns(int256) {
        firstNumber = 0;
        return firstNumber;
    }
    
    function add(int256 _secondNumber) public returns(int256) {
        
        firstNumber += _secondNumber;
        
        return firstNumber;
    }
    
    function subtract(int256 _secondNumber) public returns(int256) {
        
        if (firstNumber > _secondNumber) {
            firstNumber -= _secondNumber;
        }
        else if (_secondNumber > firstNumber) {
            firstNumber = _secondNumber - firstNumber;
        }
        else if (firstNumber == _secondNumber) {
            firstNumber = 0;
        }
        
        return firstNumber;
    }
        
    function multiply(int256 _secondNumber) public returns(int256) {
        
       firstNumber *= _secondNumber;
        
        return firstNumber;
    }    
        
    function divide(int256 _secondNumber) public returns(int256) {
        
        if (_secondNumber != 0) {
            firstNumber /= _secondNumber;
        }
                        
        return firstNumber;
    }
    
    function power(uint _secondNumber) public returns(int256) {
        
        bool negativeFirstNumber = false;
        
        if (firstNumber < 0) {
            firstNumber *= -1;
            negativeFirstNumber = true;
        }
        
        firstNumber = int(uint(firstNumber) ** _secondNumber);
        
        if (negativeFirstNumber && _secondNumber % 2 != 0) {
            firstNumber *= -1;
        }
        
        return firstNumber;
    }
    
    function remainder(int256 _secondNumber) public returns(int256) {
        
        if (_secondNumber != 0) {
            firstNumber = firstNumber % _secondNumber;
        }
        
        return firstNumber;
    }
}
